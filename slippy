#!/usr/bin/env python3


import slippy_debugging_tools as debug
import sys, re
import slippy_utility as util
import slippy_parse_input as parse
import getopt
import argparse

class Process:
    def __init__(self):
        self.curr_line        = None
        self.curr_line_num    = None
        self.curr_line_status = None
        self.output_line      = None
        self.next_line        = None




#------------------------------------------
#                FUNCTIONS
#------------------------------------------

def processQuit(cmd, process):
    """
    Exits program at provided address
    """
    number   = cmd.single_num
    regex    = cmd.single_regex
    line     = process.curr_line
    line_num = process.curr_line_num

    
    if not cmd.is_address_found: #slippy 'q' quits line 1
        return True

    if number:
        if line_num == number:
            return True
    elif regex:
        try:
            if re.search(regex , line):
                return True
        except re.error:
            util.printInvalidCommand()
    return False



def processPrint(cmd_info, process):
    """
    Prints the current line if it falls within the bounds
    of an address.
    """

    line         = process.output_line
    line_num     = process.curr_line_num

    single_regex = cmd_info.single_regex
    start_regex  = cmd_info.start_regex
    end_regex    = cmd_info.end_regex

    # If a num address is $, assign it a +1 line number for the duration
    # of this function. This allows dealing with only ints in setting flags
    # of address matching. Once EOF is reached $ will be assigned a line number
    # and this gaurd will be ignored.
    if cmd_info.single_num == r'$':
        single_num = line_num + 1
    else:
        single_num = cmd_info.single_num

    if cmd_info.start_num == r'$':
        start_num = line_num + 1
    else:
        start_num = cmd_info.start_num

    if cmd_info.end_num == r'$':
        end_num = line_num + 1
    else:
        end_num = cmd_info.end_num



    #---------'p'---------
    if not cmd_info.is_address_found:
        process.curr_line_status = 'PRINT'

    #---------'np'---------
    elif single_num:
        if single_num == line_num:
            process.curr_line_status = 'PRINT'

    #---------'/regx/p'---------
    elif single_regex:
        if line and re.search(single_regex, line):
            process.curr_line_status = 'PRINT'

    #---------'n1,n2p'---------
    elif start_num and end_num:

        if start_num == line_num:
            cmd_info.begin_flag = True

        if cmd_info.begin_flag and not cmd_info.end_flag:
            process.curr_line_status = 'PRINT'

        if end_num == line_num and cmd_info.begin_flag:
            cmd_info.end_flag = True

    #---------'n,/regx/p'---------
    elif start_num and end_regex:

        if line and re.search(end_regex, line) and cmd_info.begin_flag:
            cmd_info.end_flag = True
            cmd_info.begin_flag = False
            process.curr_line_status = 'PRINT'

        if line and start_num <= line_num and not cmd_info.end_flag:
            cmd_info.begin_flag = True

        if cmd_info.begin_flag and not cmd_info.end_flag:
            process.curr_line_status = 'PRINT'


    #---------'/regx/,np'---------
    elif start_regex and end_num:
 
        try: #gaurd from deleted lines
            match = bool(re.search(start_regex, line))
        except TypeError:
            match = False

        if not cmd_info.begin_flag and match:
            cmd_info.begin_flag = True

        if cmd_info.begin_flag and line_num <= end_num:
            process.curr_line_status = 'PRINT'
        elif match:
            process.curr_line_status = 'PRINT'


    #---------'/regx1/,/regx2/p'---------
    elif start_regex and end_regex:

        if line and re.search(end_regex, line) and cmd_info.begin_flag:
            cmd_info.end_flag = True
            process.curr_line_status = 'PRINT'

        if line and not cmd_info.end_flag and re.search(start_regex, line):
            cmd_info.begin_flag = True

        if cmd_info.begin_flag and not cmd_info.end_flag:
            process.curr_line_status = 'PRINT'

        if cmd_info.begin_flag and cmd_info and cmd_info.end_flag:
            cmd_info.begin_flag = False
            cmd_info.end_flag = False

    return cmd_info, process




def processDelete(cmd_info, process):
    """
    Prints the current line if it falls within the bounds
    of an address.
    """

    line         = process.curr_line
    line_num     = process.curr_line_num

    single_regex = cmd_info.single_regex
    start_regex  = cmd_info.start_regex
    end_regex    = cmd_info.end_regex

    #If a num address is $, assign it a +1 line number for the duration
    #of this function. This allows dealing with only ints in setting flags
    #of address matching. Once EOF is reached $ will be assigned a line number
    # and this gaurd will be ignored.
    if cmd_info.single_num == r'$':
        single_num = line_num + 1
    else:
        single_num = cmd_info.single_num

    if cmd_info.start_num == r'$':
        start_num = line_num + 1
    else:
        start_num = cmd_info.start_num

    if cmd_info.end_num == r'$':
        end_num = line_num + 1
    else:
        end_num = cmd_info.end_num


    #---------'d'---------
    if not cmd_info.is_address_found:
        process.curr_line_status = 'DELETE'

    #---------'nd'---------
    elif single_num:
        if single_num == line_num:
            process.curr_line_status = 'DELETE'

    #---------'/regx/d'---------
    elif single_regex:
        if line and re.search(single_regex, line):
            process.curr_line_status = 'DELETE'

    #---------'n1,n2d'---------
    elif start_num and end_num:

        if start_num == line_num:
            cmd_info.begin_flag = True

        if cmd_info.begin_flag and not cmd_info.end_flag:
            process.curr_line_status = 'DELETE'

        if end_num == line_num and cmd_info.begin_flag:
            cmd_info.end_flag = True

    #---------'n,/regx/d'---------
    elif start_num and end_regex:

        if line and re.search(end_regex, line) and cmd_info.begin_flag:
            cmd_info.end_flag = True
            cmd_info.begin_flag = False
            process.curr_line_status = 'DELETE'

        if line and start_num <= line_num and not cmd_info.end_flag:
            cmd_info.begin_flag = True

        if cmd_info.begin_flag and not cmd_info.end_flag:
            process.curr_line_status = 'DELETE'


    #---------'/regx/,nd'---------
    elif start_regex and end_num:
 
        try: #gaurd from deleted lines
            match = bool(re.search(start_regex, line))
        except TypeError:
            match = False

        if not cmd_info.begin_flag and match:
            cmd_info.begin_flag = True

        if cmd_info.begin_flag and line_num <= end_num or match:
            process.curr_line_status = 'DELETE'



    #---------'/regx1/,/regx2/d'---------
    elif start_regex and end_regex:

        if line and re.search(end_regex, line) and cmd_info.begin_flag:
            cmd_info.end_flag = True
            process.curr_line_status = 'DELETE'

        if line and not cmd_info.end_flag and re.search(start_regex, line):
            cmd_info.begin_flag = True

        if cmd_info.begin_flag and not cmd_info.end_flag:
            process.curr_line_status = 'DELETE'

        if line and cmd_info.begin_flag and cmd_info and cmd_info.end_flag:
            cmd_info.begin_flag = False
            cmd_info.end_flag = False

    return cmd_info, process





def processSubstitute(cmd_info, process):
    """
    Prints the current line if it falls within the bounds
    of an address.
    """

    line         = process.output_line
    line_num     = process.curr_line_num

    single_regex = cmd_info.single_regex
    start_regex  = cmd_info.start_regex
    end_regex    = cmd_info.end_regex

    g_flag       = cmd_info.s_global_flag

    # If a num address is $, assign it a +1 line number for the duration
    # of this function. This allows dealing with only ints in setting flags
    # of address matching. Once EOF is reached $ will be assigned a line number
    # and this gaurd will be ignored.
    if cmd_info.single_num == r'$':
        single_num = line_num + 1
    else:
        single_num = cmd_info.single_num

    if cmd_info.start_num == r'$':
        start_num = line_num + 1
    else:
        start_num = cmd_info.start_num

    if cmd_info.end_num == r'$':
        end_num = line_num + 1
    else:
        end_num = cmd_info.end_num


    
    #---------'s/a/b/'---------
    if not cmd_info.is_address_found:

        if line:
            process.output_line = re.sub(cmd_info.s_pattern, cmd_info.s_replace, line, g_flag)

    #---------'n s/a/b/'---------
    elif single_num:
        
        if line and single_num == line_num:
            process.output_line = re.sub(cmd_info.s_pattern, cmd_info.s_replace, line, g_flag)

    #---------'/regx/s/a/b/'---------
    elif single_regex:
        if line and re.search(single_regex, line):
            process.output_line = re.sub(cmd_info.s_pattern, cmd_info.s_replace, line, g_flag)


    #---------'n1,n2 s/a/b/'---------
    elif start_num and end_num:
        if line and start_num <= line_num <= end_num:
            process.output_line = re.sub(cmd_info.s_pattern, cmd_info.s_replace, line, g_flag)


     #---------'n,/regx/s/a/b/'---------
    elif start_num and end_regex:

        if line and re.search(end_regex, line) and cmd_info.begin_flag:
            cmd_info.end_flag = True
            cmd_info.begin_flag = False
            process.output_line = re.sub(cmd_info.s_pattern, cmd_info.s_replace, line, g_flag)

        if line and start_num <= line_num and not cmd_info.end_flag:
            cmd_info.begin_flag = True

        if cmd_info.begin_flag and not cmd_info.end_flag:
            process.output_line = re.sub(cmd_info.s_pattern, cmd_info.s_replace, line, g_flag)


     #---------'/regx/,n s/a/b/'---------
    elif start_regex and end_num:
 
        try: #gaurd from deleted lines
            match = bool(re.search(start_regex, line))
        except TypeError:
            match = False

        if not cmd_info.begin_flag and match:
            cmd_info.begin_flag = True

        if cmd_info.begin_flag and line_num <= end_num or match:
            process.output_line = re.sub(cmd_info.s_pattern, cmd_info.s_replace, line, g_flag)



    #---------'/regx1/,/regx2/ s/a/b/'---------
    elif start_regex and end_regex:

        if line and re.search(end_regex, line) and cmd_info.begin_flag:
            cmd_info.end_flag = True
            process.output_line = re.sub(cmd_info.s_pattern, cmd_info.s_replace, line, g_flag)

        if line and not cmd_info.end_flag and re.search(start_regex, line):
            cmd_info.begin_flag = True

        if cmd_info.begin_flag and not cmd_info.end_flag:
            process.output_line = re.sub(cmd_info.s_pattern, cmd_info.s_replace, line, g_flag)

        if line and cmd_info.begin_flag and cmd_info and cmd_info.end_flag:
            cmd_info.begin_flag = False
            cmd_info.end_flag = False
      
    return cmd_info, process





def commandsFromScripts(script):
    pass





#------------------------------------------
#                  MAIN
#------------------------------------------

parser = argparse.ArgumentParser(usage='%(prog)s [-i] [-n] [-f <script-file> | <sed-command>] [<files>...]')
parser.add_argument('input_cmd',nargs='?')
parser.add_argument('-f', '--option_f', nargs=1, action='append')
parser.add_argument('files', nargs='*', action='append')

parser.add_argument('-i', '--option_i', action='store_true')
parser.add_argument('-n', '--option_n', action='store_true')

args = parser.parse_args()

if args.input_cmd == None and args.option_f == None:
    util.printUsage()

if args.input_cmd:
    input_cmd = args.input_cmd

if args.option_f:
    cmd_scripts = list()
    for f in args.option_f:
        cmd_scripts += f


input_files = list()
if args.files:
    for f in args.files:
        input_files += f
        


input_cmd = args.input_cmd
cmds  = parse.parseInput(input_cmd)

option_n  = args.option_n
option_i  = args.option_i

process   = Process() #holds info of the current command executions


#preload next_line buffer
if input_files:
    num_files = len(input_files)
    f_ind = 0
    input_file = open(input_files[f_ind], 'r')
    curr_line = None
    next_line = input_file.readline()
else:
    curr_line = None
    next_line = sys.stdin.readline()

eof_last_file = False
line_num = 1
while True:

    # ----------open files and handle exits----------
    # if eof is reached close file and open next file else end
    if input_files and next_line == '':
        input_file.close()
        f_ind += 1
        if f_ind < num_files:
            input_file = open(input_files[f_ind], 'r')
            next_line = input_file.readline()
        else:
            break
   #when stdin is used
    if not input_files and curr_line == '':
        break

    #make sure only the last files eof is treated as eof
    #needed for '$' use
    if input_files and f_ind == num_files - 1:
        eof_last_file = True
    #stdin always has
    elif not input_files:
        eof_last_file = True


    #----------read files----------
    if input_files:
        curr_line = next_line
        next_line = input_file.readline()
    else:
        curr_line = next_line
        next_line = sys.stdin.readline()

    #----------update process----------
    process.curr_line     = curr_line
    process.curr_line_num = line_num
    process.next_line     = next_line


    #execute commands on current line
    for cmd_info in cmds:

        #look for file end to update $ addr
        if next_line == '' and eof_last_file:
            if cmd_info.single_num == r'$':
                cmd_info.single_num = line_num
            if cmd_info.start_num == r'$':
                cmd_info.start_num  = line_num
            if cmd_info.end_num == r'$':
                cmd_info.end_num    = line_num

        #----------Execute Quit----------
        if cmd_info.operation == 'q':
            process.output_line = process.curr_line
            is_quit = processQuit(cmd_info, process)

            if is_quit and process.curr_line != None:
                if not option_n:
                    print(process.output_line, end='')
                sys.exit(0)


        #----------Execute Print----------
        elif cmd_info.operation == 'p':

            process.output_line = process.curr_line
            cmd_info, process = processPrint(cmd_info, process)

            if process.curr_line_status == 'PRINT' and process.curr_line != None:
                print(process.output_line, end='')

            process.curr_line_status = None

        #----------Execute Delete----------
        elif cmd_info.operation == 'd':
            process.output_line = process.curr_line

            cmd_info, process = processDelete(cmd_info, process)

            if process.curr_line_status == 'DELETE':
                process.curr_line        = None
                process.output_line      = None
                process.curr_line_status = None


         #----------Execute Substitute----------
        elif cmd_info.operation == 's':

            process.output_line = process.curr_line
            cmd_info, process = processSubstitute(cmd_info, process)
            process.curr_line = process.output_line

    if not option_n and process.output_line != None:
        print(process.output_line, end='')



    line_num += 1
















